create table Transactions(
	transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    price INT NOT NULL,
    time_stamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    transaction_type ENUM('payment', 'refund') NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(user_id)
);

create table Bookings(
	PNR char(6),
    user_id INT,
    transaction_id INT,
    status_of_booking ENUM('payment', 'refund') NOT NULL,
    PRIMARY KEY (PNR, user_id),
    FOREIGN KEY (user_id) REFERENCES User(user_id),
	FOREIGN KEY (transaction_id) REFERENCES Transactions(transaction_id)
);

CREATE TABLE Trip(
	SSN char(20),
    PNR char(6),
    Schedule_id INT,
    booked_by INT,
    seat_num varchar(10),
    date_of_booking date,
    status ENUM('confirmed', 'pending', 'cancelled'),
    PRIMARY KEY (SSN, PNR, Schedule_id),
    FOREIGN KEY (booked_by) REFERENCES User(user_id),
    FOREIGN KEY (Schedule_id) REFERENCES Schedule(Schedule_id)
);

DELIMITER //

CREATE PROCEDURE ConfirmPayment(
    IN user_id INT,
    IN total_price DECIMAL(10,2),
    IN PNR char(6)
)
BEGIN
    DECLARE transaction_id INT;
    
    -- Insert into transactions table
    INSERT INTO Transactions (user_id, price, time_stamp, transaction_type)
    VALUES (user_id, total_price, NOW(), 'payment');
    
    -- Get the last inserted transaction_id
    SET transaction_id = LAST_INSERT_ID();
    
    -- Insert into Bookings table
    INSERT INTO Bookings
    VALUES (PNR, user_id, transaction_id, 'payment');
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE ConfirmSeat(
    IN user_id INT,
    IN sch_id INT,
    IN seat_no VARCHAR(5),
    IN SSN char(20),
    IN PNR char(6),
    IN p_name varchar(100),
    IN p_phone varchar(15),
    IN p_email varchar(100),
    IN no_of_passangers INT
)
BEGIN
	DECLARE seat_status VARCHAR(10);
	
    -- Start transaction to ensure no double bookings
    START TRANSACTION;
        
	-- Lock the seat row for update to prevent race conditions
    SELECT status INTO seat_status 
    FROM Seats 
    WHERE Schedule_id = sch_id AND seat_num = seat_no
    FOR UPDATE;
	
    -- Check if the seat is already booked
    IF seat_status = 'booked' THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Seat is already booked!';
    END IF;

	-- Insert seat status in the Seats Table
    UPDATE Seats
    SET status = 'booked'
    WHERE Schedule_id = sch_id AND seat_num = seat_no;
    
    -- Update the schedule table
    UPDATE Schedule
    SET seats = seats - no_of_passangers
    WHERE Schedule_id = sch_id;
    
    -- Insert into trip table
	INSERT INTO Trip
    VALUES (SSN, PNR, sch_id, user_id, seat_no, CURDATE(), 'confirmed');
    
    -- Insert into the travellers info table
	INSERT INTO Traveler_info
    SELECT SSN, p_name, p_phone, p_email
    WHERE NOT EXISTS(
		SELECT *
        FROM Traveler_info
        WHERE social_security_num = SSN
    );
	
    -- Commit transaction if everything is successful
    COMMIT;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE CheckPNR(
    IN schd_id INT,
    IN pnr_id CHAR(6),
    OUT present INT
)
BEGIN
    SET present = 0;

    IF EXISTS (SELECT 1 FROM Bookings WHERE PNR = pnr_id) THEN
        SET present = 1;
    END IF;

END //

DELIMITER ;